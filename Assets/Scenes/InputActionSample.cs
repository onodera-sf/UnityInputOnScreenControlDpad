//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scenes/InputActionSample.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionSample : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionSample()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionSample"",
    ""maps"": [
        {
            ""name"": ""Action2D"",
            ""id"": ""8d02ef1a-b445-423b-9478-8961f0ccfa41"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7ca650e8-13fb-4573-90f4-a92134603666"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""3a1a3fb6-0ba3-411d-8920-5de5cb245af6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b9564a36-7530-4499-9d12-700e3855f0cf"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9f7c6296-f45e-4883-bf46-23f2f5f1fcf8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b4d5a7a8-222d-430a-9090-bc657a38bb24"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""403d7bf6-f266-4c15-969e-cd7a16333c0f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""32514ba1-22c6-4d1c-a0d4-88d8b17d6edc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""df81e7ec-45a9-42d3-940e-052383b9e101"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4a8e5636-f0f7-4273-86b9-1d13860e59e5"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e41b2f72-1a0c-48ab-bde9-cc5c4cb2f35c"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Action2D
        m_Action2D = asset.FindActionMap("Action2D", throwIfNotFound: true);
        m_Action2D_Move = m_Action2D.FindAction("Move", throwIfNotFound: true);
        m_Action2D_Attack = m_Action2D.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Action2D
    private readonly InputActionMap m_Action2D;
    private IAction2DActions m_Action2DActionsCallbackInterface;
    private readonly InputAction m_Action2D_Move;
    private readonly InputAction m_Action2D_Attack;
    public struct Action2DActions
    {
        private @InputActionSample m_Wrapper;
        public Action2DActions(@InputActionSample wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Action2D_Move;
        public InputAction @Attack => m_Wrapper.m_Action2D_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Action2D; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Action2DActions set) { return set.Get(); }
        public void SetCallbacks(IAction2DActions instance)
        {
            if (m_Wrapper.m_Action2DActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Action2DActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Action2DActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Action2DActionsCallbackInterface.OnMove;
                @Attack.started -= m_Wrapper.m_Action2DActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_Action2DActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_Action2DActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_Action2DActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public Action2DActions @Action2D => new Action2DActions(this);
    public interface IAction2DActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
